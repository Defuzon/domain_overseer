1. Корневая структура папок и модулей
bash
Копировать
Редактировать
domain_overseer/
│
├── data/                               # Хранилище данных (игровые миры, персонажи, сэйвы, навыки)
│   ├── storage/
│   │   ├── worlds/
│   │   ├── characters/
│   │   ├── saves/
│   │   └── custom_skills/
│   └── models/
│       └── skills_library.json        # Основная библиотека навыков
│
├── core/                              # Ядро приложения: основная логика и менеджеры
│   ├── game_manager.py                # Управление игровым процессом (ходы, события, инициатива)
│   ├── world_manager.py               # Управление мирами (создание, редактирование, загрузка)
│   ├── character_manager.py           # Управление персонажами, группами, атрибутами
│   ├── save_manager.py                # Сохранение и загрузка игры (все данные мира, персонажей и т.д.)
│   ├── dice_manager.py                # Управление кубиками (прокрутка, правила бросков)
│   ├── ai_master.py                   # AI-мастер: генерация сюжета, логика, проверка
│   ├── skills_manager.py              # Управление навыками и умениями (стандартные + кастомные)
│   ├── event_bus.py                   # Система событий и сообщений для слабосвязанного взаимодействия
│   └── config.py                     # Глобальные настройки и конфигурации
│
├── logic/                            # Игровая бизнес-логика (правила, геймплей, механики)
│   ├── gameplay.py                   # Основные игровые правила и обработка ходов
│   ├── combat.py                    # Боевые механики (инициатива, действия, эффекты)
│   ├── ai_logic.py                   # Логика ИИ, проверка целостности сюжета и персонажей
│   └── transformations.py            # Визуальные и механические трансформации персонажей
│
├── ui/                              # Визуальный интерфейс
│   ├── main_window.py                # Главное окно приложения (контроллер)
│   ├── game_screen.py                # Основной экран игры (текущий ход, история, действия)
│   ├── dialogs/                     # Дополнительные окна и диалоги
│   │   ├── new_game_menu.py
│   │   ├── settings_menu.py
│   │   ├── worlds_menu.py
│   │   ├── characters_menu.py
│   │   ├── save_load_menu.py
│   │   └── skill_editor.py           # Редактор пользовательских навыков
│   ├── widgets/                     # Повторно используемые UI-компоненты (кнопки, панели)
│   └── themes/                      # Темы оформления и настройки интерфейса (яркость, контраст)
│
├── assets/                          # Графика, звуки, шрифты (если нужны, локальные)
│
├── tests/                          # Юнит и интеграционные тесты (pytest)
│
├── tools/                          # Скрипты для сборки, генерации, CI, GitHub Actions
│
├── docs/                           # Документация проекта, Wiki, README
│
├── requirements.txt                # Зависимости Python
└── run.py                         # Точка входа в приложение
2. Описание ключевых модулей и их ответственности
Модуль	Ответственность	Взаимодействия
core/game_manager.py	Управляет общим состоянием игры, ходами, координацией AI-мастера, кубиков, вызовом игровых событий	Использует dice_manager, ai_master, event_bus, save_manager
core/world_manager.py	Создание, редактирование, загрузка и сохранение миров	Взаимодействует с save_manager, ai_master
core/character_manager.py	Управление персонажами, группами, их характеристиками, инвентарём, отношениями	Использует skills_manager, transformations
core/save_manager.py	Сохраняет и загружает все игровые данные (JSON/БД), архивирует сохранения, обеспечивает целостность данных	Обращается к core, logic для сохранения полного состояния
core/dice_manager.py	Механика кубиков — броски, правила, вероятности, поддержка различных типов бросков	Используется game_manager, combat
core/ai_master.py	Генерация сюжета, проверка логики, генерация описаний, NPC, квестов, поддержка памяти AI	Взаимодействует с logic/ai_logic, event_bus
core/skills_manager.py	Управление библиотекой навыков, загрузка кастомных, сохранение новых, интерфейс взаимодействия с персонажами	Интегрируется с character_manager и ui/skill_editor
core/event_bus.py	Система подписки и рассылки событий между слабо связанными модулями	Используется во всех модулях для коммуникации
logic/gameplay.py	Основные игровые механики, обработка ходов, применение навыков и эффектов	Использует character_manager, skills_manager, dice_manager
logic/combat.py	Детальная боевая система, инициатива, действия, эффекты	Взаимодействует с gameplay и dice_manager
logic/ai_logic.py	Логика AI-мастера по проверке сюжета, сохранности данных, целостности мира	Работает с ai_master и game_manager
logic/transformations.py	Обработка и применение изменений внешности, пола, памяти персонажей, с визуальным и механическим эффектом	Интеграция с character_manager и ui
ui/main_window.py	Точка входа UI, управление окнами, навигация, масштабирование интерфейса	Взаимодействует со всеми ui-модулями
ui/game_screen.py	Отображение основного игрового процесса: история, ход, персонажи	Подключается к core/game_manager
ui/dialogs/	Дополнительные окна (новая игра, настройки, персонажи, миры, сохранения, редактор навыков)	Вызовы из main_window, event_bus для взаимодействия
ui/widgets/	Повторно используемые UI-элементы (кнопки, панели здоровья, списки навыков)	Используются в ui/dialogs и game_screen
ui/themes/	Управление темами интерфейса, настройками яркости и контраста	Применяется глобально через main_window